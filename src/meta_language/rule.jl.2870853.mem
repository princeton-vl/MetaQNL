        - using Combinatorics: permutations
        - 
        - """
        - A rule takes the form of ``p_1; p_2; \\dots; p_n \\vdash c``, where ``p_i \\in \\Sigma^{*}`` are premises, and ``c \\in \\Sigma^{*}`` is the conclusion. 
        - 
        - # Fields
        - * `premises::Vector{Sentence}`
        - * `conclusion::Sentence`
        - """
        - struct Rule
        0     premises::Vector{Sentence}
        -     conclusion::Sentence
        - end
        - 
        - """
        -     is_identical(rule_1::Rule, rule_2::Rule)
        - 
        - Test if `rule_1` and `rule_2` are identical (without considering premise reordering and ``\\alpha``-conversion).
        - """
        - function is_identical(rule_1::Rule, rule_2::Rule)
        0     return is_identical(rule_1.conclusion, rule_2.conclusion) &&
        -            length(rule_1.premises) == length(rule_2.premises) &&
        -            all(is_identical(x, y) for (x, y) in zip(rule_1.premises, rule_2.premises))
        - end
        - 
        - """
        -     is_equivalent(rule_1::Rule, rule_2::Rule)
        - 
        - Test if `rule_1` and `rule_2` are equal modulo premise reordering and ``\\alpha``-conversion.
        - """
        - function is_equivalent(rule_1::Rule, rule_2::Rule)
        -     # Shortcuts for performance.
        0     if is_identical(rule_1, rule_2)
        0         return true
        0     elseif length(rule_1.premises) != length(rule_2.premises)
        0         return false
        -     end
        - 
        0     for prems_2 in permutations(rule_2.premises)
        0         if is_equivalent(rule_1.conclusion, rule_1.premises, rule_2.conclusion, prems_2)
        0             return true
        -         end
       64     end
        - 
        0     return false
        - end
        - 
        - """
        -     rule_1::Rule == rule_2::Rule
        - 
        - Test if `rule_1` and `rule_2` are equal modulo premise reordering and ``\\alpha``-conversion.
        - """
        - function Base.:(==)(rule_1::Rule, rule_2::Rule)
        0     return is_equivalent(rule_1, rule_2)
        - end
        - 
        - function Base.isless(rule_1::Rule, rule_2::Rule)
        -     if length(rule_1.premises) > length(rule_2.premises)
        -         return true
        -     elseif length(rule_1.premises) < length(rule_2.premises)
        -         return false
        -     end
        - 
        -     for (p_1, p_2) in zip(rule_1.premises, rule_2.premises)
        -         if p_1 > p_2
        -             return true
        -         elseif p_1 < p_2
        -             return false
        -         end
        -     end
        - 
        -     return rule_1.conclusion > rule_2.conclusion
        - end
        - 
        - """
        -     hash(rule::Rule, h)
        - 
        - Compute the hash code of `rule` modulo premise reordering and ``\\alpha``-conversion.
        - """
        - function Base.hash(rule::Rule, h::UInt)::UInt
        0     h = hash(length(rule.premises), h)
        0     for p in rule.premises
        0         h = xor(alpha_invariant_hash(p), h)
        0     end
        0     h = alpha_invariant_hash(rule.conclusion, h)
        0     return h
        - end
        - 
        - function Base.show(io::IO, rule::Rule)
        0     for p in rule.premises
        0         print(io, p, "\n")
        0     end
       32     print(io, "---\n", rule.conclusion, "\n")
        - end
        - 
        - """
        -     load_rule(str::AbstractString)::Rule
        - 
        - Load a rule from its string representation `str`.
        - 
        - # Example
        - ```jldoctest
        - julia> load_rule("\\\$TRUE\\\$ [A] be not [B]\\n---\\n\\\$FALSE\\\$ [A] be [B]")
        - \$TRUE\$ [A] be not [B]
        - ---
        - \$FALSE\$ [A] be [B]
        - ```
        - """
        - function load_rule(str::AbstractString)::Rule
       96     premises = []
        0     is_conclusion = false
        - 
      544     for line in split(str, '\n')
        0         if line == "---"
        0             is_conclusion = true
        0             continue
        -         end
        - 
        0         if is_conclusion
        0             concl = Sentence(line)
        0             return Rule(convert(Vector{typeof(concl)}, premises), concl)
        -         else
      224             push!(premises, Sentence(line))
        -         end
        0     end
        - 
        0     error("Invalid rule:\n$str")
        - end
        - 
        - """
        -     load_rules_from_file(filename::AbstractString)
        - 
        - Load rules from a text file `filename`.
        - """
        - function load_rules_from_file(filename::AbstractString)
        -     return [load_rule(str) for str in split(read(open(filename), String), r"\n\n+")]
        - end
        - 
        - """
        -     macro rule_str(str::AbstractString)
        - 
        - Alias of [`load_rule`](@ref).
        - """
        - macro rule_str(str::AbstractString)
        -     return load_rule(str)
        - end
        - 
        - """
        -     is_concrete(rule::Rule)::Bool
        - 
        - Test if `rule` is a concrete rule (i.e., rule without variable).
        - """
        - function is_concrete(rule::Rule)
        0     return is_concrete(rule.conclusion) && all(is_concrete(p) for p in rule.premises)
        - end
        - 
        - function get_variables(rule::Rule)::Set{Variable}
        -     vars = get_variables(rule.premises)
        -     return get_variables!(rule.conclusion, vars)
        - end
        - 
        - function contains_premise(rule::Rule, sent)
        -     for p in rule.premises
        -         if is_identical(p, sent)
        -             return true
        -         end
        -     end
        -     return false
        - end
        - 
        - function count_variables(rule::Rule)
        0     cnt = counter(Variable)
        0     for j = 1:(1+length(rule.premises))
        0         sent = (j == 1) ? rule.conclusion : rule.premises[j-1]
        0         for (i, t) in enumerate(sent)
        0             if is_variable(t)
        0                 inc!(cnt, t)
        -             end
        0         end
        0     end
        0     return cnt
        - end
        - 
        - function num_free_variables(rule::Rule)
        -     return count(x -> x[2] == 1, count_variables(rule))
        - end
        - 
        - function collect_variables_context(rule::Rule)
        0     cnt = count_variables(rule)
        0     prev_tokens = Dict{Variable,Vector{Token}}()
        0     next_tokens = Dict{Variable,Vector{Token}}()
        0     for (var, n) in cnt
525919904         prev_tokens[var] = Vector{Token}(undef, n)
525919904         next_tokens[var] = Vector{Token}(undef, n)
        0     end
        - 
        0     for j = 1:(1+length(rule.premises))
        0         sent = (j == 1) ? rule.conclusion : rule.premises[j-1]
        0         for (i, t) in enumerate(sent)
        0             if is_variable(t)
        0                 n = cnt[t]
        0                 prev_tokens[t][end-n+1] =
        -                     (i == 1) ? create_special_symbol("START") : sent[i-1]
        0                 next_tokens[t][end-n+1] =
        -                     (i == length(sent)) ? create_special_symbol("END") : sent[i+1]
        0                 dec!(cnt, t)
        -             end
        0         end
        0     end
        - 
        0     return prev_tokens, next_tokens
        - end
        - 
        - function elements_are_same(vec)
        0     if isempty(vec)
        0         return false
        -     end
        0     e1 = first(vec)
        0     return all(e == e1 for e in (@view vec[1:end]))
        - end
        - 
        - """
        -     isvalid(rule::Rule)
        - 
        - Test if `rule` is a valid rule.
        - 
        - # Example
        - ```jldoctest
        - julia> rule_1 = load_rule("if something is red then tomorrow will be sunny\\n[X] is red\\n---\\ntomorrow will be sunny");
        - 
        - julia> isvalid(rule_1)
        - true
        - 
        - julia> rule_2 = load_rule("if something is red then tomorrow will be sunny\\n[X]\\n---\\ntomorrow will be sunny");
        - 
        - julia> isvalid(rule_2)
        - false
        - 
        - julia> rule_3 = load_rule("if something is red then tomorrow will be sunny\\n[X] is red\\n---\\ntomorrow will be [Y]");
        - 
        - julia> isvalid(rule_3)
        - false
        - ```
        - """
        - function Base.isvalid(rule::Rule)
        0     if is_concrete(rule)
        0         return true
        -     end
        - 
        0     prev_tokens, next_tokens = collect_variables_context(rule)
        - 
        -     # No > 1 variables always appear together.
        0     for (var_1, ts_1) in prev_tokens
        0         if elements_are_same(ts_1)
        0             var_2 = first(ts_1)
        0             if is_variable(var_2)
        0                 ts_2 = next_tokens[var_2]
        0                 if elements_are_same(ts_2) && first(ts_2) == var_1
        0                     return false
        -                 end
        -             end
        -         end
        0     end
        - 
        -     # Variables in the conclusion must also appear in premises.
        0     @assert !isempty(rule.conclusion)
        0     vars_in_premises = get_variables(rule.premises)
        0     for t in rule.conclusion
        0         if is_variable(t) && !(t in vars_in_premises)
        0             return false
        -         end
        0     end
        - 
        0     function is_free(var)
        -         length(prev_tokens[var]) == 1
        -     end
        - 
        0     for sent in rule.premises
        0         @assert !isempty(sent)
        -         # No premises consisting of only a single free variable.
        0         if is_one_variable(sent) && is_free(sent[begin])
        0             return false
        -         end
        -         # No free variable adjacent with other variables.
        -         #=
        -         for (i, t) in enumerate(sent)
        -             if is_variable(t) && is_free(t)
        -                 if (i > 1 && is_variable(sent[i-1])) || (i < length(sent) && is_variable(sent[i+1]))
        -                     return false
        -                 end
        -             end
        -         end
        -         =#
        0     end
        - 
        -     # 4. No more than 1 free variable.
        0     return num_free_variables(rule) <= 1
        - end
        - 
        - function normalize(rule::Rule)
        -     # Replace multiple consecutive variables that always appear together.
        -     # And remove premises consisting of only a single free variable.
        - 
        0     prev_tokens, next_tokens = collect_variables_context(rule)
 28974080     vars_to_remove = Variable[]
        - 
        0     for (var_1, ts_1) in prev_tokens
        0         if elements_are_same(ts_1)
        0             var_2 = first(ts_1)
        0             if is_variable(var_2)
        0                 ts_2 = next_tokens[var_2]
        0                 if elements_are_same(ts_2) && first(ts_2) == var_1
      144                     push!(vars_to_remove, var_1)
        -                 end
        -             end
        -         end
        0     end
        - 
        0     function process(sent)
        -         return Sentence([t for t in sent if !(t in vars_to_remove)])
        -     end
        - 
 28974160     return Rule(process.(rule.premises), process(rule.conclusion))
        - end
        - 
        - export Rule, is_identical, load_rule, load_rules_from_file, @rule_str, num_free_variables
