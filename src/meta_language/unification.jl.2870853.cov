        - """
        -     unify(sent_1::AbstractSentence, sent_2::AbstractSentence)::Vector{Substitution}
        - 
        - Return the unifiers of `sent_1` and `sent_2`.
        - 
        - # Example
        - ```jldoctest
        - julia> unify(sent"dax fep", sent"dax [X]")
        - 1-element Vector{Substitution}:
        -  {[X] -> fep, }
        - 
        - julia> unify(sent"hello [X]", sent"[X] hello", depth_limit = 10)
        - 10-element Vector{Substitution}:
        -  {[X] -> hello, }
        -  {[X] -> hello hello, }
        -  {[X] -> hello hello hello, }
        -  {[X] -> hello hello hello hello, }
        -  {[X] -> hello hello hello hello hello, }
        -  {[X] -> hello hello hello hello hello hello, }
        -  {[X] -> hello hello hello hello hello hello hello, }
        -  {[X] -> hello hello hello hello hello hello hello hello, }
        -  {[X] -> hello hello hello hello hello hello hello hello hello, }
        -  {[X] -> hello hello hello hello hello hello hello hello hello hello, }
        - ```
        - """
       32 function unify(
        -     sent_1::AbstractSentence,
        -     sent_2::AbstractSentence;
        -     depth_limit::Int = 5,
        - )::Vector{Substitution}
       38     if is_concrete(sent_1)
        2         return match(sent_2, sent_1)
       30     elseif is_concrete(sent_2)
        7         return match(sent_1, sent_2)
        -     end
        - 
       31     no_symbol_1 = has_no_special_symbol(sent_1)
       44     no_symbol_2 = has_no_special_symbol(sent_2)
        - 
        7     if no_symbol_1 && no_symbol_2
        7         return unify_no_special_symbol(sent_1, sent_2, depth_limit)
        0     elseif no_symbol_1 || no_symbol_2
        0         return Substitution[]
        -     else
        0         tpl_1, segments_1 = decompose(sent_1)
        0         tpl_2, segments_2 = decompose(sent_2)
        0         if tpl_1 != tpl_2
        0             return Substitution[]
        -         end
        0         return unify_no_special_symbol(segments_1, segments_2, depth_limit)
        -     end
        - end
        - 
        0 function unify_no_special_symbol(
        -     sents_1::AbstractVector{<:AbstractSentence},
        -     sents_2::AbstractVector{<:AbstractSentence},
        -     depth_limit::Int,
        - )::Vector{Substitution}
        0     @assert length(sents_1) == length(sents_2)
        0     if isempty(sents_1)
        0         return [Substitution()]
        -     end
        - 
        0     first_sent_1 = sents_1[begin]
        0     first_sent_2 = sents_2[begin]
        0     first_substs = unify_no_special_symbol(first_sent_1, first_sent_2, depth_limit)
        0     if length(sents_1) == 1
        0         return first_substs
        -     end
        - 
        0     substs = Substitution[]
        0     sents_remain_2 = @view sents_2[2:end]
        - 
        0     for subst in first_substs
        0         sents_remain_1 = subst.(@view sents_1[2:end])
        0         for other_subst in
        -             unify_no_special_symbol(sents_remain_1, subst.(sents_remain_2), depth_limit)
        0             push!(substs, subst ∘ other_subst)
        0         end
        0     end
        - 
        0     return substs
        - end
        - 
        - struct UnificationSubproblem
       99     sentence_1::Sentence
        -     sentence_2::Sentence
        -     substitution::Substitution
        -     depth::Int
        - end
        - 
        7 function unify_no_special_symbol(
        -     sent_1::AbstractSentence,
        -     sent_2::AbstractSentence,
        -     depth_limit::Int,
        - )::Vector{Substitution}
        - 
        7     results = Substitution[]
        7     queue = Queue{UnificationSubproblem}()
        7     enqueue!(queue, UnificationSubproblem(sent_1, sent_2, Substitution(), 0))
        - 
      106     while !isempty(queue)
       99         problem = dequeue!(queue)
       99         sent_1, sent_2 = find_different_infixes(
        -             problem.sentence_1,
        -             problem.sentence_2,
        -             requires_concrete = false,
        -         )
        - 
        -         # problem.sentence_1 == problem.sentence_2
      100         if isempty(sent_1) && isempty(sent_2)
        5             push!(results, problem.substitution)
        5             continue
        -         end
        - 
      187         if isempty(sent_1) ||
        -            isempty(sent_2) ||
        -            problem.depth >= depth_limit ||
        -            (startswith_word(sent_1) && startswith_word(sent_2))
       31             continue
        -         end
        - 
       63         depth = problem.depth + 1
        - 
       63         if is_one_variable(sent_1)
        -             # sent_1: [X]
        -             # sent_2
        2             X = sent_1[1]
        4             if !(X in sent_2)
        2                 push!(results, problem.substitution ∘ VariableBinding(X, sent_2[1:end]))
        -             end
        - 
       61         elseif is_one_variable(sent_2)
        -             # sent_1
        -             # sent_2: [X]
       11             X = sent_2[1]
       36             if !(X in sent_1)
       11                 push!(results, problem.substitution ∘ VariableBinding(X, sent_1[1:end]))
        -             end
        - 
       80         elseif is_concrete(sent_1)
       16             for subst in match(sent_2, sent_1)
        0                 push!(results, problem.substitution ∘ subst)
        0             end
        - 
      146         elseif is_concrete(sent_2)
        0             for subst in match(sent_1, sent_2)
        0                 push!(results, problem.substitution ∘ subst)
        0             end
        - 
       42         elseif (!startswith_word(sent_1) && !startswith_word(sent_2))
        -             # sent_1: [X] suffix_1
        -             # sent_2: [Y] suffix_2
        8             X = sent_1[1]
        8             Y = sent_2[1]
        8             suffix_1 = sent_1[2:end]
        8             suffix_2 = sent_2[2:end]
        - 
        -             # Option a: [X] -> [Y], suffix_1' -> suffix_2'
        8             let subst_a = VariableBinding(X, Sentence([Y]))
        8                 subproblem_a = UnificationSubproblem(
        -                     subst_a(suffix_1),
        -                     subst_a(suffix_2),
        -                     problem.substitution ∘ subst_a,
        -                     depth,
        -                 )
        8                 enqueue!(queue, subproblem_a)
        -             end
        - 
        -             # Option b: [X] -> [Y] [X], [X] suffix_1' -> suffix_2'
        8             let subst_b = VariableBinding(X, Sentence([Y, X]))
        8                 subproblem_b = UnificationSubproblem(
        -                     X * subst_b(suffix_1),
        -                     subst_b(suffix_2),
        -                     problem.substitution ∘ subst_b,
        -                     depth,
        -                 )
        8                 enqueue!(queue, subproblem_b)
        -             end
        -             # Option c: [Y] -> [X] [Y], suffix_1' -> [Y] suffix_2'
        8             let subst_c = VariableBinding(Y, Sentence([X, Y]))
        8                 subproblem_c = UnificationSubproblem(
        -                     subst_c(suffix_1),
        -                     Y * subst_c(suffix_2),
        -                     problem.substitution ∘ subst_c,
        -                     depth,
        -                 )
        8                 enqueue!(queue, subproblem_c)
        -             end
        - 
       34         elseif !startswith_word(sent_1)
        -             # sent_1: [X] suffix_1
        -             # sent_2: t suffix_2
       29             X = sent_1[1]
       29             t = sent_2[1]
       29             suffix_1 = sent_1[2:end]
       29             suffix_2 = sent_2[2:end]
        -             # Option a: [X] -> t, suffix_1' -> suffix_2'
       29             let subst_a = VariableBinding(X, Sentence([t]))
       29                 subproblem_a = UnificationSubproblem(
        -                     subst_a(suffix_1),
        -                     subst_a(suffix_2),
        -                     problem.substitution ∘ subst_a,
        -                     depth,
        -                 )
       29                 enqueue!(queue, subproblem_a)
        -             end
        -             # Option 2: [X] -> t [X], [X] suffix_1' -> suffix_2'
       29             let subst_b = VariableBinding(X, Sentence([t, X]))
       29                 subproblem_b = UnificationSubproblem(
        -                     X * subst_b(suffix_1),
        -                     subst_b(suffix_2),
        -                     problem.substitution ∘ subst_b,
        -                     depth,
        -                 )
       29                 enqueue!(queue, subproblem_b)
        -             end
        -         else
        5             @assert !startswith_word(sent_2)
        -             # sent_1: t suffix_1
        -             # sent_2: [X]  suffix_2
        5             t = sent_1[1]
        5             X = sent_2[1]
        5             suffix_1 = sent_1[2:end]
        5             suffix_2 = sent_2[2:end]
        -             # Option 1: [X] -> t, suffix_2' -> suffix_1'
        5             let subst_a = VariableBinding(X, Sentence([t]))
        5                 subproblem_a = UnificationSubproblem(
        -                     subst_a(suffix_2),
        -                     subst_a(suffix_1),
        -                     problem.substitution ∘ subst_a,
        -                     depth,
        -                 )
        5                 enqueue!(queue, subproblem_a)
        -             end
        -             # Option 2: [X] -> t [X], [X] suffix_2' -> suffix_1'
        5             let subst_b = VariableBinding(X, Sentence([t, X]))
        5                 subproblem_b = UnificationSubproblem(
        -                     X * subst_b(suffix_2),
        -                     subst_b(suffix_1),
        -                     problem.substitution ∘ subst_b,
        -                     depth,
        -                 )
        5                 enqueue!(queue, subproblem_b)
        -             end
        -         end
       99     end
        - 
        7     return results
        - end
        - 
        - export unify
